apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: text-audit
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: text-audit
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        image: minio/minio:RELEASE.2023-09-04T19-57-37Z
        ports:
        - containerPort: 9000
        - containerPort: 9001
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            configMapKeyRef:
              name: text-audit-config
              key: MINIO_ACCESS_KEY
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: text-audit-secrets
              key: MINIO_SECRET_KEY
        - name: MINIO_BROWSER_REDIRECT_URL
          value: "http://localhost:9001"
        command:
        - /bin/bash
        - -c
        args:
        - minio server /data --console-address ":9001"
        volumeMounts:
        - name: minio-storage
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: minio-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: text-audit
  labels:
    app: minio
spec:
  selector:
    app: minio
  ports:
  - port: 9000
    targetPort: 9000
    name: api
  - port: 9001
    targetPort: 9001
    name: console

---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-setup
  namespace: text-audit
spec:
  template:
    spec:
      containers:
      - name: minio-setup
        image: minio/mc:RELEASE.2023-08-29T23-07-35Z
        env:
        - name: MINIO_ENDPOINT
          value: "http://minio-service:9000"
        - name: MINIO_ACCESS_KEY
          valueFrom:
            configMapKeyRef:
              name: text-audit-config
              key: MINIO_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: text-audit-secrets
              key: MINIO_SECRET_KEY
        command:
        - /bin/bash
        - -c
        args:
        - |
          # 等待MinIO服务启动
          until mc alias set minio $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY; do
            echo "等待MinIO服务启动..."
            sleep 5
          done
          
          # 创建存储桶
          mc mb minio/text-audit-data --ignore-existing
          mc mb minio/text-audit-models --ignore-existing
          mc mb minio/text-audit-datasets --ignore-existing
          mc mb minio/text-audit-logs --ignore-existing
          
          # 设置存储桶策略
          mc anonymous set public minio/text-audit-data
          mc anonymous set public minio/text-audit-models
          
          # 创建目录结构
          mc cp /dev/null minio/text-audit-data/raw-texts/.keep
          mc cp /dev/null minio/text-audit-data/processed-texts/.keep
          mc cp /dev/null minio/text-audit-models/trained-models/.keep
          mc cp /dev/null minio/text-audit-models/model-artifacts/.keep
          mc cp /dev/null minio/text-audit-datasets/training-data/.keep
          mc cp /dev/null minio/text-audit-datasets/test-data/.keep
          mc cp /dev/null minio/text-audit-logs/application-logs/.keep
          
          echo "MinIO初始化完成"
      restartPolicy: OnFailure
  backoffLimit: 3