// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v4.25.1
// source: proto/text_audit.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 违规类型
type ViolationType int32

const (
	ViolationType_NORMAL        ViolationType = 0 // 正常
	ViolationType_PORNOGRAPHY   ViolationType = 1 // 色情
	ViolationType_VIOLENCE      ViolationType = 2 // 暴力
	ViolationType_ADVERTISEMENT ViolationType = 3 // 广告
	ViolationType_SPAM          ViolationType = 4 // 垃圾信息
	ViolationType_HATE_SPEECH   ViolationType = 5 // 仇恨言论
	ViolationType_OTHER         ViolationType = 6 // 其他
)

// Enum value maps for ViolationType.
var (
	ViolationType_name = map[int32]string{
		0: "NORMAL",
		1: "PORNOGRAPHY",
		2: "VIOLENCE",
		3: "ADVERTISEMENT",
		4: "SPAM",
		5: "HATE_SPEECH",
		6: "OTHER",
	}
	ViolationType_value = map[string]int32{
		"NORMAL":        0,
		"PORNOGRAPHY":   1,
		"VIOLENCE":      2,
		"ADVERTISEMENT": 3,
		"SPAM":          4,
		"HATE_SPEECH":   5,
		"OTHER":         6,
	}
)

func (x ViolationType) Enum() *ViolationType {
	p := new(ViolationType)
	*p = x
	return p
}

func (x ViolationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViolationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_text_audit_proto_enumTypes[0].Descriptor()
}

func (ViolationType) Type() protoreflect.EnumType {
	return &file_proto_text_audit_proto_enumTypes[0]
}

func (x ViolationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViolationType.Descriptor instead.
func (ViolationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{0}
}

// 训练状态
type TrainStatus int32

const (
	TrainStatus_TRAINING_PENDING   TrainStatus = 0 // 等待中
	TrainStatus_TRAINING_RUNNING   TrainStatus = 1 // 训练中
	TrainStatus_TRAINING_COMPLETED TrainStatus = 2 // 已完成
	TrainStatus_TRAINING_FAILED    TrainStatus = 3 // 失败
)

// Enum value maps for TrainStatus.
var (
	TrainStatus_name = map[int32]string{
		0: "TRAINING_PENDING",
		1: "TRAINING_RUNNING",
		2: "TRAINING_COMPLETED",
		3: "TRAINING_FAILED",
	}
	TrainStatus_value = map[string]int32{
		"TRAINING_PENDING":   0,
		"TRAINING_RUNNING":   1,
		"TRAINING_COMPLETED": 2,
		"TRAINING_FAILED":    3,
	}
)

func (x TrainStatus) Enum() *TrainStatus {
	p := new(TrainStatus)
	*p = x
	return p
}

func (x TrainStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrainStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_text_audit_proto_enumTypes[1].Descriptor()
}

func (TrainStatus) Type() protoreflect.EnumType {
	return &file_proto_text_audit_proto_enumTypes[1]
}

func (x TrainStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrainStatus.Descriptor instead.
func (TrainStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{1}
}

// 源类型
type SourceType int32

const (
	SourceType_API         SourceType = 0 // API接口
	SourceType_WEB_CRAWLER SourceType = 1 // 网页爬虫
	SourceType_LOCAL_FILE  SourceType = 2 // 本地文件
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "API",
		1: "WEB_CRAWLER",
		2: "LOCAL_FILE",
	}
	SourceType_value = map[string]int32{
		"API":         0,
		"WEB_CRAWLER": 1,
		"LOCAL_FILE":  2,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_text_audit_proto_enumTypes[2].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_proto_text_audit_proto_enumTypes[2]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{2}
}

// 采集状态
type CollectionStatus int32

const (
	CollectionStatus_COLLECTION_PENDING   CollectionStatus = 0 // 等待中
	CollectionStatus_COLLECTION_RUNNING   CollectionStatus = 1 // 采集中
	CollectionStatus_COLLECTION_COMPLETED CollectionStatus = 2 // 已完成
	CollectionStatus_COLLECTION_FAILED    CollectionStatus = 3 // 失败
)

// Enum value maps for CollectionStatus.
var (
	CollectionStatus_name = map[int32]string{
		0: "COLLECTION_PENDING",
		1: "COLLECTION_RUNNING",
		2: "COLLECTION_COMPLETED",
		3: "COLLECTION_FAILED",
	}
	CollectionStatus_value = map[string]int32{
		"COLLECTION_PENDING":   0,
		"COLLECTION_RUNNING":   1,
		"COLLECTION_COMPLETED": 2,
		"COLLECTION_FAILED":    3,
	}
)

func (x CollectionStatus) Enum() *CollectionStatus {
	p := new(CollectionStatus)
	*p = x
	return p
}

func (x CollectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_text_audit_proto_enumTypes[3].Descriptor()
}

func (CollectionStatus) Type() protoreflect.EnumType {
	return &file_proto_text_audit_proto_enumTypes[3]
}

func (x CollectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectionStatus.Descriptor instead.
func (CollectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{3}
}

// 原始文本数据
type RawText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                                                                             // 文本内容
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                                                                               // 来源（如"豆瓣评论"）
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                        // 采集时间戳（毫秒）
	Id            string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`                                                                                       // 唯一标识（UUID生成）
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 元数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawText) Reset() {
	*x = RawText{}
	mi := &file_proto_text_audit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawText) ProtoMessage() {}

func (x *RawText) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawText.ProtoReflect.Descriptor instead.
func (*RawText) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{0}
}

func (x *RawText) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *RawText) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RawText) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RawText) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RawText) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 预处理后的文本数据
type ProcessedText struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                           // 唯一标识
	Content            string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                                 // 清洗后的文本内容
	Tokens             []string               `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`                                                   // 分词结果
	Features           []float64              `protobuf:"fixed64,4,rep,packed,name=features,proto3" json:"features,omitempty"`                                      // TF-IDF特征向量
	Label              int32                  `protobuf:"varint,5,opt,name=label,proto3" json:"label,omitempty"`                                                    // 标注标签（0=正常，1=违规）
	Source             string                 `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`                                                   // 来源
	Timestamp          int64                  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                            // 处理时间戳
	ProcessingMetadata *ProcessingMetadata    `protobuf:"bytes,8,opt,name=processing_metadata,json=processingMetadata,proto3" json:"processing_metadata,omitempty"` // 处理元数据
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProcessedText) Reset() {
	*x = ProcessedText{}
	mi := &file_proto_text_audit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessedText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessedText) ProtoMessage() {}

func (x *ProcessedText) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessedText.ProtoReflect.Descriptor instead.
func (*ProcessedText) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessedText) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProcessedText) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ProcessedText) GetTokens() []string {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *ProcessedText) GetFeatures() []float64 {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *ProcessedText) GetLabel() int32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *ProcessedText) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ProcessedText) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ProcessedText) GetProcessingMetadata() *ProcessingMetadata {
	if x != nil {
		return x.ProcessingMetadata
	}
	return nil
}

// 处理元数据
type ProcessingMetadata struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	OriginalLength   int32                  `protobuf:"varint,1,opt,name=original_length,json=originalLength,proto3" json:"original_length,omitempty"`          // 原始文本长度
	CleanedLength    int32                  `protobuf:"varint,2,opt,name=cleaned_length,json=cleanedLength,proto3" json:"cleaned_length,omitempty"`             // 清洗后文本长度
	TokenCount       int32                  `protobuf:"varint,3,opt,name=token_count,json=tokenCount,proto3" json:"token_count,omitempty"`                      // 分词数量
	RemovedTokens    []string               `protobuf:"bytes,4,rep,name=removed_tokens,json=removedTokens,proto3" json:"removed_tokens,omitempty"`              // 被移除的停用词
	ProcessingTimeMs float64                `protobuf:"fixed64,5,opt,name=processing_time_ms,json=processingTimeMs,proto3" json:"processing_time_ms,omitempty"` // 处理耗时（毫秒）
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProcessingMetadata) Reset() {
	*x = ProcessingMetadata{}
	mi := &file_proto_text_audit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingMetadata) ProtoMessage() {}

func (x *ProcessingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingMetadata.ProtoReflect.Descriptor instead.
func (*ProcessingMetadata) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessingMetadata) GetOriginalLength() int32 {
	if x != nil {
		return x.OriginalLength
	}
	return 0
}

func (x *ProcessingMetadata) GetCleanedLength() int32 {
	if x != nil {
		return x.CleanedLength
	}
	return 0
}

func (x *ProcessingMetadata) GetTokenCount() int32 {
	if x != nil {
		return x.TokenCount
	}
	return 0
}

func (x *ProcessingMetadata) GetRemovedTokens() []string {
	if x != nil {
		return x.RemovedTokens
	}
	return nil
}

func (x *ProcessingMetadata) GetProcessingTimeMs() float64 {
	if x != nil {
		return x.ProcessingTimeMs
	}
	return 0
}

// 审核请求
type AuditRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                            // 待审核文本
	RequestId     string                 `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // 请求ID
	Options       *AuditOptions          `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`                      // 审核选项
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditRequest) Reset() {
	*x = AuditRequest{}
	mi := &file_proto_text_audit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditRequest) ProtoMessage() {}

func (x *AuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditRequest.ProtoReflect.Descriptor instead.
func (*AuditRequest) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{3}
}

func (x *AuditRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AuditRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *AuditRequest) GetOptions() *AuditOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// 审核选项
type AuditOptions struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Models            []string               `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`                                                 // 使用的模型列表
	Threshold         float64                `protobuf:"fixed64,2,opt,name=threshold,proto3" json:"threshold,omitempty"`                                         // 违规阈值
	ReturnFeatures    bool                   `protobuf:"varint,3,opt,name=return_features,json=returnFeatures,proto3" json:"return_features,omitempty"`          // 是否返回特征
	ReturnExplanation bool                   `protobuf:"varint,4,opt,name=return_explanation,json=returnExplanation,proto3" json:"return_explanation,omitempty"` // 是否返回解释
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AuditOptions) Reset() {
	*x = AuditOptions{}
	mi := &file_proto_text_audit_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditOptions) ProtoMessage() {}

func (x *AuditOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditOptions.ProtoReflect.Descriptor instead.
func (*AuditOptions) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{4}
}

func (x *AuditOptions) GetModels() []string {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *AuditOptions) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AuditOptions) GetReturnFeatures() bool {
	if x != nil {
		return x.ReturnFeatures
	}
	return false
}

func (x *AuditOptions) GetReturnExplanation() bool {
	if x != nil {
		return x.ReturnExplanation
	}
	return false
}

// 审核响应
type AuditResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RequestId        string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                                            // 请求ID
	IsViolation      bool                   `protobuf:"varint,2,opt,name=is_violation,json=isViolation,proto3" json:"is_violation,omitempty"`                                     // 是否违规
	Confidence       float64                `protobuf:"fixed64,3,opt,name=confidence,proto3" json:"confidence,omitempty"`                                                         // 置信度
	ViolationType    ViolationType          `protobuf:"varint,4,opt,name=violation_type,json=violationType,proto3,enum=text_audit.ViolationType" json:"violation_type,omitempty"` // 违规类型
	ModelResults     []*ModelResult         `protobuf:"bytes,5,rep,name=model_results,json=modelResults,proto3" json:"model_results,omitempty"`                                   // 各模型结果
	Features         []float64              `protobuf:"fixed64,6,rep,packed,name=features,proto3" json:"features,omitempty"`                                                      // 特征向量（可选）
	Explanation      string                 `protobuf:"bytes,7,opt,name=explanation,proto3" json:"explanation,omitempty"`                                                         // 解释说明（可选）
	ProcessingTimeMs int64                  `protobuf:"varint,8,opt,name=processing_time_ms,json=processingTimeMs,proto3" json:"processing_time_ms,omitempty"`                    // 处理耗时
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AuditResponse) Reset() {
	*x = AuditResponse{}
	mi := &file_proto_text_audit_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditResponse) ProtoMessage() {}

func (x *AuditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditResponse.ProtoReflect.Descriptor instead.
func (*AuditResponse) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{5}
}

func (x *AuditResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *AuditResponse) GetIsViolation() bool {
	if x != nil {
		return x.IsViolation
	}
	return false
}

func (x *AuditResponse) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *AuditResponse) GetViolationType() ViolationType {
	if x != nil {
		return x.ViolationType
	}
	return ViolationType_NORMAL
}

func (x *AuditResponse) GetModelResults() []*ModelResult {
	if x != nil {
		return x.ModelResults
	}
	return nil
}

func (x *AuditResponse) GetFeatures() []float64 {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *AuditResponse) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

func (x *AuditResponse) GetProcessingTimeMs() int64 {
	if x != nil {
		return x.ProcessingTimeMs
	}
	return 0
}

// 模型结果
type ModelResult struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ModelName       string                 `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`                                            // 模型名称
	Score           float64                `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`                                                                   // 得分
	IsViolation     bool                   `protobuf:"varint,3,opt,name=is_violation,json=isViolation,proto3" json:"is_violation,omitempty"`                                     // 是否违规
	ViolationType   ViolationType          `protobuf:"varint,4,opt,name=violation_type,json=violationType,proto3,enum=text_audit.ViolationType" json:"violation_type,omitempty"` // 违规类型
	InferenceTimeMs int64                  `protobuf:"varint,5,opt,name=inference_time_ms,json=inferenceTimeMs,proto3" json:"inference_time_ms,omitempty"`                       // 推理耗时
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ModelResult) Reset() {
	*x = ModelResult{}
	mi := &file_proto_text_audit_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelResult) ProtoMessage() {}

func (x *ModelResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelResult.ProtoReflect.Descriptor instead.
func (*ModelResult) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{6}
}

func (x *ModelResult) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ModelResult) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ModelResult) GetIsViolation() bool {
	if x != nil {
		return x.IsViolation
	}
	return false
}

func (x *ModelResult) GetViolationType() ViolationType {
	if x != nil {
		return x.ViolationType
	}
	return ViolationType_NORMAL
}

func (x *ModelResult) GetInferenceTimeMs() int64 {
	if x != nil {
		return x.InferenceTimeMs
	}
	return 0
}

// 批量审核请求
type BatchAuditRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requests      []*AuditRequest        `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	BatchId       string                 `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchAuditRequest) Reset() {
	*x = BatchAuditRequest{}
	mi := &file_proto_text_audit_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAuditRequest) ProtoMessage() {}

func (x *BatchAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAuditRequest.ProtoReflect.Descriptor instead.
func (*BatchAuditRequest) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{7}
}

func (x *BatchAuditRequest) GetRequests() []*AuditRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchAuditRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

// 批量审核响应
type BatchAuditResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	BatchId               string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Responses             []*AuditResponse       `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
	TotalProcessingTimeMs int64                  `protobuf:"varint,3,opt,name=total_processing_time_ms,json=totalProcessingTimeMs,proto3" json:"total_processing_time_ms,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *BatchAuditResponse) Reset() {
	*x = BatchAuditResponse{}
	mi := &file_proto_text_audit_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAuditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAuditResponse) ProtoMessage() {}

func (x *BatchAuditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAuditResponse.ProtoReflect.Descriptor instead.
func (*BatchAuditResponse) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{8}
}

func (x *BatchAuditResponse) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchAuditResponse) GetResponses() []*AuditResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *BatchAuditResponse) GetTotalProcessingTimeMs() int64 {
	if x != nil {
		return x.TotalProcessingTimeMs
	}
	return 0
}

// 模型训练请求
type TrainRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelType     string                 `protobuf:"bytes,1,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`       // 模型类型
	Config        *TrainConfig           `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`                              // 训练配置
	DatasetPath   string                 `protobuf:"bytes,3,opt,name=dataset_path,json=datasetPath,proto3" json:"dataset_path,omitempty"` // 数据集路径
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrainRequest) Reset() {
	*x = TrainRequest{}
	mi := &file_proto_text_audit_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainRequest) ProtoMessage() {}

func (x *TrainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainRequest.ProtoReflect.Descriptor instead.
func (*TrainRequest) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{9}
}

func (x *TrainRequest) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

func (x *TrainRequest) GetConfig() *TrainConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TrainRequest) GetDatasetPath() string {
	if x != nil {
		return x.DatasetPath
	}
	return ""
}

// 训练配置
type TrainConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Epochs          int32                  `protobuf:"varint,1,opt,name=epochs,proto3" json:"epochs,omitempty"`                                                                                            // 训练轮数
	LearningRate    float64                `protobuf:"fixed64,2,opt,name=learning_rate,json=learningRate,proto3" json:"learning_rate,omitempty"`                                                           // 学习率
	BatchSize       int32                  `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`                                                                     // 批次大小
	ValidationSplit float64                `protobuf:"fixed64,4,opt,name=validation_split,json=validationSplit,proto3" json:"validation_split,omitempty"`                                                  // 验证集比例
	Hyperparameters map[string]string      `protobuf:"bytes,5,rep,name=hyperparameters,proto3" json:"hyperparameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 超参数
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TrainConfig) Reset() {
	*x = TrainConfig{}
	mi := &file_proto_text_audit_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainConfig) ProtoMessage() {}

func (x *TrainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainConfig.ProtoReflect.Descriptor instead.
func (*TrainConfig) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{10}
}

func (x *TrainConfig) GetEpochs() int32 {
	if x != nil {
		return x.Epochs
	}
	return 0
}

func (x *TrainConfig) GetLearningRate() float64 {
	if x != nil {
		return x.LearningRate
	}
	return 0
}

func (x *TrainConfig) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *TrainConfig) GetValidationSplit() float64 {
	if x != nil {
		return x.ValidationSplit
	}
	return 0
}

func (x *TrainConfig) GetHyperparameters() map[string]string {
	if x != nil {
		return x.Hyperparameters
	}
	return nil
}

// 训练响应
type TrainResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelId       string                 `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`             // 模型ID
	Status        TrainStatus            `protobuf:"varint,2,opt,name=status,proto3,enum=text_audit.TrainStatus" json:"status,omitempty"` // 训练状态
	Metrics       *TrainMetrics          `protobuf:"bytes,3,opt,name=metrics,proto3" json:"metrics,omitempty"`                            // 训练指标
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                            // 状态消息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrainResponse) Reset() {
	*x = TrainResponse{}
	mi := &file_proto_text_audit_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainResponse) ProtoMessage() {}

func (x *TrainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainResponse.ProtoReflect.Descriptor instead.
func (*TrainResponse) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{11}
}

func (x *TrainResponse) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *TrainResponse) GetStatus() TrainStatus {
	if x != nil {
		return x.Status
	}
	return TrainStatus_TRAINING_PENDING
}

func (x *TrainResponse) GetMetrics() *TrainMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *TrainResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 训练指标
type TrainMetrics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accuracy      float64                `protobuf:"fixed64,1,opt,name=accuracy,proto3" json:"accuracy,omitempty"`              // 准确率
	Precision     float64                `protobuf:"fixed64,2,opt,name=precision,proto3" json:"precision,omitempty"`            // 精确率
	Recall        float64                `protobuf:"fixed64,3,opt,name=recall,proto3" json:"recall,omitempty"`                  // 召回率
	F1Score       float64                `protobuf:"fixed64,4,opt,name=f1_score,json=f1Score,proto3" json:"f1_score,omitempty"` // F1值
	Loss          float64                `protobuf:"fixed64,5,opt,name=loss,proto3" json:"loss,omitempty"`                      // 损失值
	Epoch         int32                  `protobuf:"varint,6,opt,name=epoch,proto3" json:"epoch,omitempty"`                     // 当前轮数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrainMetrics) Reset() {
	*x = TrainMetrics{}
	mi := &file_proto_text_audit_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainMetrics) ProtoMessage() {}

func (x *TrainMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainMetrics.ProtoReflect.Descriptor instead.
func (*TrainMetrics) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{12}
}

func (x *TrainMetrics) GetAccuracy() float64 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *TrainMetrics) GetPrecision() float64 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *TrainMetrics) GetRecall() float64 {
	if x != nil {
		return x.Recall
	}
	return 0
}

func (x *TrainMetrics) GetF1Score() float64 {
	if x != nil {
		return x.F1Score
	}
	return 0
}

func (x *TrainMetrics) GetLoss() float64 {
	if x != nil {
		return x.Loss
	}
	return 0
}

func (x *TrainMetrics) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

// 采集请求
type CollectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *CollectionSource      `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"` // 采集源
	Config        *CollectionConfig      `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"` // 采集配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectRequest) Reset() {
	*x = CollectRequest{}
	mi := &file_proto_text_audit_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectRequest) ProtoMessage() {}

func (x *CollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectRequest.ProtoReflect.Descriptor instead.
func (*CollectRequest) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{13}
}

func (x *CollectRequest) GetSource() *CollectionSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CollectRequest) GetConfig() *CollectionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// 采集源
type CollectionSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          SourceType             `protobuf:"varint,1,opt,name=type,proto3,enum=text_audit.SourceType" json:"type,omitempty"`                                                           // 源类型
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`                                                                                         // URL地址
	FilePath      string                 `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`                                                               // 文件路径
	Parameters    map[string]string      `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 参数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectionSource) Reset() {
	*x = CollectionSource{}
	mi := &file_proto_text_audit_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionSource) ProtoMessage() {}

func (x *CollectionSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionSource.ProtoReflect.Descriptor instead.
func (*CollectionSource) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{14}
}

func (x *CollectionSource) GetType() SourceType {
	if x != nil {
		return x.Type
	}
	return SourceType_API
}

func (x *CollectionSource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CollectionSource) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CollectionSource) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// 采集配置
type CollectionConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MaxCount        int32                  `protobuf:"varint,1,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`                      // 最大采集数量
	ConcurrentLimit int32                  `protobuf:"varint,2,opt,name=concurrent_limit,json=concurrentLimit,proto3" json:"concurrent_limit,omitempty"` // 并发限制
	RateLimit       int32                  `protobuf:"varint,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`                   // 速率限制（每秒）
	Filters         []string               `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`                                         // 过滤规则
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CollectionConfig) Reset() {
	*x = CollectionConfig{}
	mi := &file_proto_text_audit_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionConfig) ProtoMessage() {}

func (x *CollectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionConfig.ProtoReflect.Descriptor instead.
func (*CollectionConfig) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{15}
}

func (x *CollectionConfig) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *CollectionConfig) GetConcurrentLimit() int32 {
	if x != nil {
		return x.ConcurrentLimit
	}
	return 0
}

func (x *CollectionConfig) GetRateLimit() int32 {
	if x != nil {
		return x.RateLimit
	}
	return 0
}

func (x *CollectionConfig) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

// 采集响应
type CollectResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TaskId         string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                          // 任务ID
	Status         CollectionStatus       `protobuf:"varint,2,opt,name=status,proto3,enum=text_audit.CollectionStatus" json:"status,omitempty"`      // 采集状态
	CollectedCount int32                  `protobuf:"varint,3,opt,name=collected_count,json=collectedCount,proto3" json:"collected_count,omitempty"` // 已采集数量
	Message        string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                                      // 状态消息
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CollectResponse) Reset() {
	*x = CollectResponse{}
	mi := &file_proto_text_audit_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectResponse) ProtoMessage() {}

func (x *CollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectResponse.ProtoReflect.Descriptor instead.
func (*CollectResponse) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{16}
}

func (x *CollectResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CollectResponse) GetStatus() CollectionStatus {
	if x != nil {
		return x.Status
	}
	return CollectionStatus_COLLECTION_PENDING
}

func (x *CollectResponse) GetCollectedCount() int32 {
	if x != nil {
		return x.CollectedCount
	}
	return 0
}

func (x *CollectResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 状态请求
type StatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // 任务ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_proto_text_audit_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{17}
}

func (x *StatusRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 状态响应
type StatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                     // 任务ID
	Status        CollectionStatus       `protobuf:"varint,2,opt,name=status,proto3,enum=text_audit.CollectionStatus" json:"status,omitempty"` // 状态
	Progress      int32                  `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`                              // 进度百分比
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                                 // 状态消息
	StartTime     int64                  `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`           // 开始时间
	EndTime       int64                  `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                 // 结束时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_proto_text_audit_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_text_audit_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_text_audit_proto_rawDescGZIP(), []int{18}
}

func (x *StatusResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *StatusResponse) GetStatus() CollectionStatus {
	if x != nil {
		return x.Status
	}
	return CollectionStatus_COLLECTION_PENDING
}

func (x *StatusResponse) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *StatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StatusResponse) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

var File_proto_text_audit_proto protoreflect.FileDescriptor

const file_proto_text_audit_proto_rawDesc = "" +
	"\n" +
	"\x16proto/text_audit.proto\x12\n" +
	"text_audit\"\xe5\x01\n" +
	"\aRawText\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\x12=\n" +
	"\bmetadata\x18\x05 \x03(\v2!.text_audit.RawText.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8a\x02\n" +
	"\rProcessedText\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12\x16\n" +
	"\x06tokens\x18\x03 \x03(\tR\x06tokens\x12\x1a\n" +
	"\bfeatures\x18\x04 \x03(\x01R\bfeatures\x12\x14\n" +
	"\x05label\x18\x05 \x01(\x05R\x05label\x12\x16\n" +
	"\x06source\x18\x06 \x01(\tR\x06source\x12\x1c\n" +
	"\ttimestamp\x18\a \x01(\x03R\ttimestamp\x12O\n" +
	"\x13processing_metadata\x18\b \x01(\v2\x1e.text_audit.ProcessingMetadataR\x12processingMetadata\"\xda\x01\n" +
	"\x12ProcessingMetadata\x12'\n" +
	"\x0foriginal_length\x18\x01 \x01(\x05R\x0eoriginalLength\x12%\n" +
	"\x0ecleaned_length\x18\x02 \x01(\x05R\rcleanedLength\x12\x1f\n" +
	"\vtoken_count\x18\x03 \x01(\x05R\n" +
	"tokenCount\x12%\n" +
	"\x0eremoved_tokens\x18\x04 \x03(\tR\rremovedTokens\x12,\n" +
	"\x12processing_time_ms\x18\x05 \x01(\x01R\x10processingTimeMs\"u\n" +
	"\fAuditRequest\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12\x1d\n" +
	"\n" +
	"request_id\x18\x02 \x01(\tR\trequestId\x122\n" +
	"\aoptions\x18\x03 \x01(\v2\x18.text_audit.AuditOptionsR\aoptions\"\x9c\x01\n" +
	"\fAuditOptions\x12\x16\n" +
	"\x06models\x18\x01 \x03(\tR\x06models\x12\x1c\n" +
	"\tthreshold\x18\x02 \x01(\x01R\tthreshold\x12'\n" +
	"\x0freturn_features\x18\x03 \x01(\bR\x0ereturnFeatures\x12-\n" +
	"\x12return_explanation\x18\x04 \x01(\bR\x11returnExplanation\"\xdd\x02\n" +
	"\rAuditResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12!\n" +
	"\fis_violation\x18\x02 \x01(\bR\visViolation\x12\x1e\n" +
	"\n" +
	"confidence\x18\x03 \x01(\x01R\n" +
	"confidence\x12@\n" +
	"\x0eviolation_type\x18\x04 \x01(\x0e2\x19.text_audit.ViolationTypeR\rviolationType\x12<\n" +
	"\rmodel_results\x18\x05 \x03(\v2\x17.text_audit.ModelResultR\fmodelResults\x12\x1a\n" +
	"\bfeatures\x18\x06 \x03(\x01R\bfeatures\x12 \n" +
	"\vexplanation\x18\a \x01(\tR\vexplanation\x12,\n" +
	"\x12processing_time_ms\x18\b \x01(\x03R\x10processingTimeMs\"\xd3\x01\n" +
	"\vModelResult\x12\x1d\n" +
	"\n" +
	"model_name\x18\x01 \x01(\tR\tmodelName\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x01R\x05score\x12!\n" +
	"\fis_violation\x18\x03 \x01(\bR\visViolation\x12@\n" +
	"\x0eviolation_type\x18\x04 \x01(\x0e2\x19.text_audit.ViolationTypeR\rviolationType\x12*\n" +
	"\x11inference_time_ms\x18\x05 \x01(\x03R\x0finferenceTimeMs\"d\n" +
	"\x11BatchAuditRequest\x124\n" +
	"\brequests\x18\x01 \x03(\v2\x18.text_audit.AuditRequestR\brequests\x12\x19\n" +
	"\bbatch_id\x18\x02 \x01(\tR\abatchId\"\xa1\x01\n" +
	"\x12BatchAuditResponse\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x127\n" +
	"\tresponses\x18\x02 \x03(\v2\x19.text_audit.AuditResponseR\tresponses\x127\n" +
	"\x18total_processing_time_ms\x18\x03 \x01(\x03R\x15totalProcessingTimeMs\"\x81\x01\n" +
	"\fTrainRequest\x12\x1d\n" +
	"\n" +
	"model_type\x18\x01 \x01(\tR\tmodelType\x12/\n" +
	"\x06config\x18\x02 \x01(\v2\x17.text_audit.TrainConfigR\x06config\x12!\n" +
	"\fdataset_path\x18\x03 \x01(\tR\vdatasetPath\"\xb0\x02\n" +
	"\vTrainConfig\x12\x16\n" +
	"\x06epochs\x18\x01 \x01(\x05R\x06epochs\x12#\n" +
	"\rlearning_rate\x18\x02 \x01(\x01R\flearningRate\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x03 \x01(\x05R\tbatchSize\x12)\n" +
	"\x10validation_split\x18\x04 \x01(\x01R\x0fvalidationSplit\x12V\n" +
	"\x0fhyperparameters\x18\x05 \x03(\v2,.text_audit.TrainConfig.HyperparametersEntryR\x0fhyperparameters\x1aB\n" +
	"\x14HyperparametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa9\x01\n" +
	"\rTrainResponse\x12\x19\n" +
	"\bmodel_id\x18\x01 \x01(\tR\amodelId\x12/\n" +
	"\x06status\x18\x02 \x01(\x0e2\x17.text_audit.TrainStatusR\x06status\x122\n" +
	"\ametrics\x18\x03 \x01(\v2\x18.text_audit.TrainMetricsR\ametrics\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"\xa5\x01\n" +
	"\fTrainMetrics\x12\x1a\n" +
	"\baccuracy\x18\x01 \x01(\x01R\baccuracy\x12\x1c\n" +
	"\tprecision\x18\x02 \x01(\x01R\tprecision\x12\x16\n" +
	"\x06recall\x18\x03 \x01(\x01R\x06recall\x12\x19\n" +
	"\bf1_score\x18\x04 \x01(\x01R\af1Score\x12\x12\n" +
	"\x04loss\x18\x05 \x01(\x01R\x04loss\x12\x14\n" +
	"\x05epoch\x18\x06 \x01(\x05R\x05epoch\"|\n" +
	"\x0eCollectRequest\x124\n" +
	"\x06source\x18\x01 \x01(\v2\x1c.text_audit.CollectionSourceR\x06source\x124\n" +
	"\x06config\x18\x02 \x01(\v2\x1c.text_audit.CollectionConfigR\x06config\"\xfa\x01\n" +
	"\x10CollectionSource\x12*\n" +
	"\x04type\x18\x01 \x01(\x0e2\x16.text_audit.SourceTypeR\x04type\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12\x1b\n" +
	"\tfile_path\x18\x03 \x01(\tR\bfilePath\x12L\n" +
	"\n" +
	"parameters\x18\x04 \x03(\v2,.text_audit.CollectionSource.ParametersEntryR\n" +
	"parameters\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x93\x01\n" +
	"\x10CollectionConfig\x12\x1b\n" +
	"\tmax_count\x18\x01 \x01(\x05R\bmaxCount\x12)\n" +
	"\x10concurrent_limit\x18\x02 \x01(\x05R\x0fconcurrentLimit\x12\x1d\n" +
	"\n" +
	"rate_limit\x18\x03 \x01(\x05R\trateLimit\x12\x18\n" +
	"\afilters\x18\x04 \x03(\tR\afilters\"\xa3\x01\n" +
	"\x0fCollectResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x124\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1c.text_audit.CollectionStatusR\x06status\x12'\n" +
	"\x0fcollected_count\x18\x03 \x01(\x05R\x0ecollectedCount\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"(\n" +
	"\rStatusRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\"\xcf\x01\n" +
	"\x0eStatusResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x124\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1c.text_audit.CollectionStatusR\x06status\x12\x1a\n" +
	"\bprogress\x18\x03 \x01(\x05R\bprogress\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"start_time\x18\x05 \x01(\x03R\tstartTime\x12\x19\n" +
	"\bend_time\x18\x06 \x01(\x03R\aendTime*s\n" +
	"\rViolationType\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x00\x12\x0f\n" +
	"\vPORNOGRAPHY\x10\x01\x12\f\n" +
	"\bVIOLENCE\x10\x02\x12\x11\n" +
	"\rADVERTISEMENT\x10\x03\x12\b\n" +
	"\x04SPAM\x10\x04\x12\x0f\n" +
	"\vHATE_SPEECH\x10\x05\x12\t\n" +
	"\x05OTHER\x10\x06*f\n" +
	"\vTrainStatus\x12\x14\n" +
	"\x10TRAINING_PENDING\x10\x00\x12\x14\n" +
	"\x10TRAINING_RUNNING\x10\x01\x12\x16\n" +
	"\x12TRAINING_COMPLETED\x10\x02\x12\x13\n" +
	"\x0fTRAINING_FAILED\x10\x03*6\n" +
	"\n" +
	"SourceType\x12\a\n" +
	"\x03API\x10\x00\x12\x0f\n" +
	"\vWEB_CRAWLER\x10\x01\x12\x0e\n" +
	"\n" +
	"LOCAL_FILE\x10\x02*s\n" +
	"\x10CollectionStatus\x12\x16\n" +
	"\x12COLLECTION_PENDING\x10\x00\x12\x16\n" +
	"\x12COLLECTION_RUNNING\x10\x01\x12\x18\n" +
	"\x14COLLECTION_COMPLETED\x10\x02\x12\x15\n" +
	"\x11COLLECTION_FAILED\x10\x032\xaf\x02\n" +
	"\x10TextAuditService\x12@\n" +
	"\tAuditText\x12\x18.text_audit.AuditRequest\x1a\x19.text_audit.AuditResponse\x12O\n" +
	"\x0eBatchAuditText\x12\x1d.text_audit.BatchAuditRequest\x1a\x1e.text_audit.BatchAuditResponse\x12A\n" +
	"\n" +
	"TrainModel\x12\x18.text_audit.TrainRequest\x1a\x19.text_audit.TrainResponse\x12E\n" +
	"\x0eGetTrainStatus\x12\x18.text_audit.TrainRequest\x1a\x19.text_audit.TrainResponse2\xad\x01\n" +
	"\x15DataCollectionService\x12F\n" +
	"\vCollectText\x12\x1a.text_audit.CollectRequest\x1a\x1b.text_audit.CollectResponse\x12L\n" +
	"\x13GetCollectionStatus\x12\x19.text_audit.StatusRequest\x1a\x1a.text_audit.StatusResponseBB\n" +
	"\x13com.textaudit.protoB\x0eTextAuditProtoZ\x1bgithub.com/text-audit/protob\x06proto3"

var (
	file_proto_text_audit_proto_rawDescOnce sync.Once
	file_proto_text_audit_proto_rawDescData []byte
)

func file_proto_text_audit_proto_rawDescGZIP() []byte {
	file_proto_text_audit_proto_rawDescOnce.Do(func() {
		file_proto_text_audit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_text_audit_proto_rawDesc), len(file_proto_text_audit_proto_rawDesc)))
	})
	return file_proto_text_audit_proto_rawDescData
}

var file_proto_text_audit_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_text_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_text_audit_proto_goTypes = []any{
	(ViolationType)(0),         // 0: text_audit.ViolationType
	(TrainStatus)(0),           // 1: text_audit.TrainStatus
	(SourceType)(0),            // 2: text_audit.SourceType
	(CollectionStatus)(0),      // 3: text_audit.CollectionStatus
	(*RawText)(nil),            // 4: text_audit.RawText
	(*ProcessedText)(nil),      // 5: text_audit.ProcessedText
	(*ProcessingMetadata)(nil), // 6: text_audit.ProcessingMetadata
	(*AuditRequest)(nil),       // 7: text_audit.AuditRequest
	(*AuditOptions)(nil),       // 8: text_audit.AuditOptions
	(*AuditResponse)(nil),      // 9: text_audit.AuditResponse
	(*ModelResult)(nil),        // 10: text_audit.ModelResult
	(*BatchAuditRequest)(nil),  // 11: text_audit.BatchAuditRequest
	(*BatchAuditResponse)(nil), // 12: text_audit.BatchAuditResponse
	(*TrainRequest)(nil),       // 13: text_audit.TrainRequest
	(*TrainConfig)(nil),        // 14: text_audit.TrainConfig
	(*TrainResponse)(nil),      // 15: text_audit.TrainResponse
	(*TrainMetrics)(nil),       // 16: text_audit.TrainMetrics
	(*CollectRequest)(nil),     // 17: text_audit.CollectRequest
	(*CollectionSource)(nil),   // 18: text_audit.CollectionSource
	(*CollectionConfig)(nil),   // 19: text_audit.CollectionConfig
	(*CollectResponse)(nil),    // 20: text_audit.CollectResponse
	(*StatusRequest)(nil),      // 21: text_audit.StatusRequest
	(*StatusResponse)(nil),     // 22: text_audit.StatusResponse
	nil,                        // 23: text_audit.RawText.MetadataEntry
	nil,                        // 24: text_audit.TrainConfig.HyperparametersEntry
	nil,                        // 25: text_audit.CollectionSource.ParametersEntry
}
var file_proto_text_audit_proto_depIdxs = []int32{
	23, // 0: text_audit.RawText.metadata:type_name -> text_audit.RawText.MetadataEntry
	6,  // 1: text_audit.ProcessedText.processing_metadata:type_name -> text_audit.ProcessingMetadata
	8,  // 2: text_audit.AuditRequest.options:type_name -> text_audit.AuditOptions
	0,  // 3: text_audit.AuditResponse.violation_type:type_name -> text_audit.ViolationType
	10, // 4: text_audit.AuditResponse.model_results:type_name -> text_audit.ModelResult
	0,  // 5: text_audit.ModelResult.violation_type:type_name -> text_audit.ViolationType
	7,  // 6: text_audit.BatchAuditRequest.requests:type_name -> text_audit.AuditRequest
	9,  // 7: text_audit.BatchAuditResponse.responses:type_name -> text_audit.AuditResponse
	14, // 8: text_audit.TrainRequest.config:type_name -> text_audit.TrainConfig
	24, // 9: text_audit.TrainConfig.hyperparameters:type_name -> text_audit.TrainConfig.HyperparametersEntry
	1,  // 10: text_audit.TrainResponse.status:type_name -> text_audit.TrainStatus
	16, // 11: text_audit.TrainResponse.metrics:type_name -> text_audit.TrainMetrics
	18, // 12: text_audit.CollectRequest.source:type_name -> text_audit.CollectionSource
	19, // 13: text_audit.CollectRequest.config:type_name -> text_audit.CollectionConfig
	2,  // 14: text_audit.CollectionSource.type:type_name -> text_audit.SourceType
	25, // 15: text_audit.CollectionSource.parameters:type_name -> text_audit.CollectionSource.ParametersEntry
	3,  // 16: text_audit.CollectResponse.status:type_name -> text_audit.CollectionStatus
	3,  // 17: text_audit.StatusResponse.status:type_name -> text_audit.CollectionStatus
	7,  // 18: text_audit.TextAuditService.AuditText:input_type -> text_audit.AuditRequest
	11, // 19: text_audit.TextAuditService.BatchAuditText:input_type -> text_audit.BatchAuditRequest
	13, // 20: text_audit.TextAuditService.TrainModel:input_type -> text_audit.TrainRequest
	13, // 21: text_audit.TextAuditService.GetTrainStatus:input_type -> text_audit.TrainRequest
	17, // 22: text_audit.DataCollectionService.CollectText:input_type -> text_audit.CollectRequest
	21, // 23: text_audit.DataCollectionService.GetCollectionStatus:input_type -> text_audit.StatusRequest
	9,  // 24: text_audit.TextAuditService.AuditText:output_type -> text_audit.AuditResponse
	12, // 25: text_audit.TextAuditService.BatchAuditText:output_type -> text_audit.BatchAuditResponse
	15, // 26: text_audit.TextAuditService.TrainModel:output_type -> text_audit.TrainResponse
	15, // 27: text_audit.TextAuditService.GetTrainStatus:output_type -> text_audit.TrainResponse
	20, // 28: text_audit.DataCollectionService.CollectText:output_type -> text_audit.CollectResponse
	22, // 29: text_audit.DataCollectionService.GetCollectionStatus:output_type -> text_audit.StatusResponse
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_text_audit_proto_init() }
func file_proto_text_audit_proto_init() {
	if File_proto_text_audit_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_text_audit_proto_rawDesc), len(file_proto_text_audit_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_text_audit_proto_goTypes,
		DependencyIndexes: file_proto_text_audit_proto_depIdxs,
		EnumInfos:         file_proto_text_audit_proto_enumTypes,
		MessageInfos:      file_proto_text_audit_proto_msgTypes,
	}.Build()
	File_proto_text_audit_proto = out.File
	file_proto_text_audit_proto_goTypes = nil
	file_proto_text_audit_proto_depIdxs = nil
}
