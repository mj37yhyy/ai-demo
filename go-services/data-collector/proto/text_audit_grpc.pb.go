// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/text_audit.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TextAuditService_AuditText_FullMethodName      = "/text_audit.TextAuditService/AuditText"
	TextAuditService_BatchAuditText_FullMethodName = "/text_audit.TextAuditService/BatchAuditText"
	TextAuditService_TrainModel_FullMethodName     = "/text_audit.TextAuditService/TrainModel"
	TextAuditService_GetTrainStatus_FullMethodName = "/text_audit.TextAuditService/GetTrainStatus"
)

// TextAuditServiceClient is the client API for TextAuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC 服务定义
type TextAuditServiceClient interface {
	// 单个文本审核
	AuditText(ctx context.Context, in *AuditRequest, opts ...grpc.CallOption) (*AuditResponse, error)
	// 批量文本审核
	BatchAuditText(ctx context.Context, in *BatchAuditRequest, opts ...grpc.CallOption) (*BatchAuditResponse, error)
	// 模型训练
	TrainModel(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error)
	// 获取训练状态
	GetTrainStatus(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error)
}

type textAuditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextAuditServiceClient(cc grpc.ClientConnInterface) TextAuditServiceClient {
	return &textAuditServiceClient{cc}
}

func (c *textAuditServiceClient) AuditText(ctx context.Context, in *AuditRequest, opts ...grpc.CallOption) (*AuditResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuditResponse)
	err := c.cc.Invoke(ctx, TextAuditService_AuditText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textAuditServiceClient) BatchAuditText(ctx context.Context, in *BatchAuditRequest, opts ...grpc.CallOption) (*BatchAuditResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchAuditResponse)
	err := c.cc.Invoke(ctx, TextAuditService_BatchAuditText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textAuditServiceClient) TrainModel(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, TextAuditService_TrainModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textAuditServiceClient) GetTrainStatus(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, TextAuditService_GetTrainStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextAuditServiceServer is the server API for TextAuditService service.
// All implementations must embed UnimplementedTextAuditServiceServer
// for forward compatibility.
//
// gRPC 服务定义
type TextAuditServiceServer interface {
	// 单个文本审核
	AuditText(context.Context, *AuditRequest) (*AuditResponse, error)
	// 批量文本审核
	BatchAuditText(context.Context, *BatchAuditRequest) (*BatchAuditResponse, error)
	// 模型训练
	TrainModel(context.Context, *TrainRequest) (*TrainResponse, error)
	// 获取训练状态
	GetTrainStatus(context.Context, *TrainRequest) (*TrainResponse, error)
	mustEmbedUnimplementedTextAuditServiceServer()
}

// UnimplementedTextAuditServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextAuditServiceServer struct{}

func (UnimplementedTextAuditServiceServer) AuditText(context.Context, *AuditRequest) (*AuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditText not implemented")
}
func (UnimplementedTextAuditServiceServer) BatchAuditText(context.Context, *BatchAuditRequest) (*BatchAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAuditText not implemented")
}
func (UnimplementedTextAuditServiceServer) TrainModel(context.Context, *TrainRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainModel not implemented")
}
func (UnimplementedTextAuditServiceServer) GetTrainStatus(context.Context, *TrainRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainStatus not implemented")
}
func (UnimplementedTextAuditServiceServer) mustEmbedUnimplementedTextAuditServiceServer() {}
func (UnimplementedTextAuditServiceServer) testEmbeddedByValue()                          {}

// UnsafeTextAuditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextAuditServiceServer will
// result in compilation errors.
type UnsafeTextAuditServiceServer interface {
	mustEmbedUnimplementedTextAuditServiceServer()
}

func RegisterTextAuditServiceServer(s grpc.ServiceRegistrar, srv TextAuditServiceServer) {
	// If the following call pancis, it indicates UnimplementedTextAuditServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextAuditService_ServiceDesc, srv)
}

func _TextAuditService_AuditText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextAuditServiceServer).AuditText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextAuditService_AuditText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextAuditServiceServer).AuditText(ctx, req.(*AuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextAuditService_BatchAuditText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextAuditServiceServer).BatchAuditText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextAuditService_BatchAuditText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextAuditServiceServer).BatchAuditText(ctx, req.(*BatchAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextAuditService_TrainModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextAuditServiceServer).TrainModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextAuditService_TrainModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextAuditServiceServer).TrainModel(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextAuditService_GetTrainStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextAuditServiceServer).GetTrainStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextAuditService_GetTrainStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextAuditServiceServer).GetTrainStatus(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextAuditService_ServiceDesc is the grpc.ServiceDesc for TextAuditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextAuditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "text_audit.TextAuditService",
	HandlerType: (*TextAuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuditText",
			Handler:    _TextAuditService_AuditText_Handler,
		},
		{
			MethodName: "BatchAuditText",
			Handler:    _TextAuditService_BatchAuditText_Handler,
		},
		{
			MethodName: "TrainModel",
			Handler:    _TextAuditService_TrainModel_Handler,
		},
		{
			MethodName: "GetTrainStatus",
			Handler:    _TextAuditService_GetTrainStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/text_audit.proto",
}

const (
	DataCollectionService_CollectText_FullMethodName         = "/text_audit.DataCollectionService/CollectText"
	DataCollectionService_GetCollectionStatus_FullMethodName = "/text_audit.DataCollectionService/GetCollectionStatus"
)

// DataCollectionServiceClient is the client API for DataCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 数据采集服务
type DataCollectionServiceClient interface {
	// 采集文本数据
	CollectText(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error)
	// 获取采集状态
	GetCollectionStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type dataCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataCollectionServiceClient(cc grpc.ClientConnInterface) DataCollectionServiceClient {
	return &dataCollectionServiceClient{cc}
}

func (c *dataCollectionServiceClient) CollectText(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, DataCollectionService_CollectText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCollectionServiceClient) GetCollectionStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, DataCollectionService_GetCollectionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataCollectionServiceServer is the server API for DataCollectionService service.
// All implementations must embed UnimplementedDataCollectionServiceServer
// for forward compatibility.
//
// 数据采集服务
type DataCollectionServiceServer interface {
	// 采集文本数据
	CollectText(context.Context, *CollectRequest) (*CollectResponse, error)
	// 获取采集状态
	GetCollectionStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedDataCollectionServiceServer()
}

// UnimplementedDataCollectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataCollectionServiceServer struct{}

func (UnimplementedDataCollectionServiceServer) CollectText(context.Context, *CollectRequest) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectText not implemented")
}
func (UnimplementedDataCollectionServiceServer) GetCollectionStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionStatus not implemented")
}
func (UnimplementedDataCollectionServiceServer) mustEmbedUnimplementedDataCollectionServiceServer() {}
func (UnimplementedDataCollectionServiceServer) testEmbeddedByValue()                               {}

// UnsafeDataCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataCollectionServiceServer will
// result in compilation errors.
type UnsafeDataCollectionServiceServer interface {
	mustEmbedUnimplementedDataCollectionServiceServer()
}

func RegisterDataCollectionServiceServer(s grpc.ServiceRegistrar, srv DataCollectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataCollectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataCollectionService_ServiceDesc, srv)
}

func _DataCollectionService_CollectText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCollectionServiceServer).CollectText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataCollectionService_CollectText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCollectionServiceServer).CollectText(ctx, req.(*CollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCollectionService_GetCollectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCollectionServiceServer).GetCollectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataCollectionService_GetCollectionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCollectionServiceServer).GetCollectionStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataCollectionService_ServiceDesc is the grpc.ServiceDesc for DataCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "text_audit.DataCollectionService",
	HandlerType: (*DataCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectText",
			Handler:    _DataCollectionService_CollectText_Handler,
		},
		{
			MethodName: "GetCollectionStatus",
			Handler:    _DataCollectionService_GetCollectionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/text_audit.proto",
}
