plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.textaudit'
version = '1.0.0'
sourceCompatibility = '21'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    springCloudVersion = '2021.0.8'
    protobufVersion = '3.24.4'
    grpcVersion = '1.58.0'
}

dependencies {
    // Spring Boot核心依赖
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    // 数据库驱动
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'
    implementation 'com.h2database:h2'
    
    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.apache.commons:commons-pool2'
    
    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'
    
    // gRPC和Protobuf
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"
    
    // 机器学习库
    implementation 'org.deeplearning4j:deeplearning4j-core:1.0.0-M2.1'
    implementation 'org.nd4j:nd4j-native-platform:1.0.0-M2.1'
    implementation 'org.deeplearning4j:deeplearning4j-nlp:1.0.0-M2.1'
    implementation 'org.deeplearning4j:deeplearning4j-zoo:1.0.0-M2.1'
    
    // Weka机器学习库
    implementation 'nz.ac.waikato.cms.weka:weka-stable:3.8.6'
    
    // Smile机器学习库
    implementation 'com.github.haifengl:smile-core:3.0.2'
    implementation 'com.github.haifengl:smile-nlp:3.0.2'
    implementation 'com.github.haifengl:smile-data:3.0.2'
    
    // Apache Spark MLlib (可选)
    implementation 'org.apache.spark:spark-core_2.12:3.5.0'
    implementation 'org.apache.spark:spark-mllib_2.12:3.5.0'
    
    // 数学和统计库
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.ejml:ejml-all:0.41'
    
    // 文本处理和NLP
    implementation 'com.hankcs:hanlp:portable-1.8.4'
    implementation 'org.apache.opennlp:opennlp-tools:2.3.0'
    
    // JSON处理
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.google.code.gson:gson'
    
    // 工具类
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.google.guava:guava:32.1.3-jre'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // 监控和指标
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-core'
    
    // 日志
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    
    // API文档
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
    implementation 'org.springdoc:springdoc-openapi-webmvc-core:1.7.0'
    
    // 测试依赖
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// Protobuf配置
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// 复制proto文件
task copyProtos(type: Copy) {
    from '../../../proto'
    into 'src/main/proto'
}

compileJava.dependsOn copyProtos

// 测试配置
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// JAR配置
jar {
    enabled = false
    archiveClassifier = ''
}

// Spring Boot JAR配置
bootJar {
    enabled = true
    archiveClassifier = ''
    mainClass = 'com.textaudit.trainer.ModelTrainerApplication'
}