plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.textaudit'
version = '1.0.0'

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // Database
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    
    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'redis.clients:jedis:5.0.2'
    
    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-streams'
    
    // gRPC
    implementation 'net.devh:grpc-server-spring-boot-starter:2.15.0.RELEASE'
    implementation 'net.devh:grpc-client-spring-boot-starter:2.15.0.RELEASE'
    
    // Protobuf
    implementation 'com.google.protobuf:protobuf-java:3.25.1'
    implementation 'io.grpc:grpc-stub:1.59.0'
    implementation 'io.grpc:grpc-protobuf:1.59.0'
    implementation 'io.grpc:grpc-netty-shaded:1.59.0'
    
    // NLP Libraries
    implementation 'com.hankcs:hanlp:portable-1.8.4'
    implementation 'org.apache.lucene:lucene-analyzers-smartcn:9.8.0'
    implementation 'org.apache.lucene:lucene-core:9.8.0'
    implementation 'org.apache.lucene:lucene-analysis-common:9.8.0'
    
    // Machine Learning
    implementation 'org.deeplearning4j:deeplearning4j-core:1.0.0-M2.1'
    implementation 'org.nd4j:nd4j-native-platform:1.0.0-M2.1'
    implementation 'org.deeplearning4j:deeplearning4j-nlp:1.0.0-M2.1'
    implementation 'smile:smile-core:3.0.2'
    implementation 'smile:smile-nlp:3.0.2'
    
    // Text Processing
    implementation 'org.apache.commons:commons-text:1.11.0'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    
    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // Utilities
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Monitoring
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-core'
    
    // Logging
    implementation 'ch.qos.logback:logback-classic'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

// Protobuf configuration
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.1'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.59.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Copy proto files from shared directory
task copyProtoFiles(type: Copy) {
    from '../../proto'
    into 'src/main/proto'
}

compileJava.dependsOn copyProtoFiles

tasks.named('test') {
    useJUnitPlatform()
}

// JAR configuration
jar {
    enabled = false
}

bootJar {
    archiveFileName = 'data-preprocessor.jar'
    mainClass = 'com.textaudit.preprocessor.DataPreprocessorApplication'
}

// JVM options
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
        '-parameters',
        '--enable-preview'
    ]
}

// Spring Boot configuration
springBoot {
    buildInfo()
}